import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.plugins.signing.Sign
import javax.swing.*
import groovy.text.SimpleTemplateEngine
import org.kohsuke.github.*

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.kohsuke:github-api:1.90'
    }
}

plugins {
    
    id 'groovy'
    
    id 'eclipse'
    id 'idea'
    id 'findbugs'
    id 'signing'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.7.2"
    id "net.saliman.properties" version "1.4.6"
    id "com.github.ethankhall.semantic-versioning" version "1.1.0"
    id "com.github.ben-manes.versions" version "0.13.0"
    id "org.asciidoctor.convert" version "1.5.3"
    id "org.ajoberstar.git-publish" version "0.3.2"
    id "com.github.hierynomus.license" version "0.12.1"
    id 'com.github.jk1.dependency-license-report' version '0.3.8'
    id "com.bmuschko.clover" version "2.2.0"
}

project.version.with {
    major = verklemptVersionMajor as int
    minor= verklemptVersionMinor as int
    patch = verklemptVersionPatch as int
    if (project.hasProperty('verklemptVersionLabel')) {
        preRelease = verklemptVersionLabel
    }
    releaseBuild = Boolean.valueOf(verklemptReleaseBuild)
}
ext.verklemptVersion = project.version as String
ext.verklemptTag = Boolean.valueOf(verklemptReleaseBuild) ? "v$ext.verklemptVersion" : 'master'
def pomConfig = {
    url "https://github.com/mlipper/verklempt"
    developers {
        developer {
            id "mlipper"
            name "Matthew Lipper"
            email "mlipper@gmail.com"
        }
    }
    scm {
        connection "https://github.com/mlipper/verklempt.git"
        developerConnection "https://github.com/mlipper/verklempt.git"
        url "https://github.com/mlipper/verklempt"
    }
}

ext.groovyVersion = '2.4.12'


group = 'com.digitalclash'
version = verklemptVersion

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:all,-syntax,-missing', '-quiet')
}






repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

sourceCompatibility = 1.8

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

[compileGroovy, compileTestGroovy]*.options*.encoding = defaultEncoding
[compileGroovy, compileTestGroovy]*.groovyOptions*.encoding = defaultEncoding

sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDirs = ["src/main/java", "src/main/groovy"]

configurations {
    provided
    compile {transitive = true}
}

license {
    header rootProject.file("license-header.txt")
    skipExistingHeaders true
    ignoreFailures false
}

signing {
    sign configurations.archives
}

signArchives {
    onlyIf { gradle.taskGraph.allTasks.findAll {task -> isPublishTask(task)} }
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:$groovyVersion"
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
    
    provided 'com.google.code.findbugs:findbugs-annotations:3.0.1'
    
    
    testCompile('org.spockframework:spock-core:1.1-groovy-2.4') {
        exclude module: 'groovy-all'
    }
    testCompile 'cglib:cglib-nodep:3.2.4'
    testCompile 'org.objenesis:objenesis:2.4'
    testCompile('com.athaydes:spock-reports:1.2.13') { transitive = false}
    testCompile('ch.qos.logback:logback-classic:1.1.7')
    clover 'org.openclover:clover:4.2.1'
}

sourceSets.main.compileClasspath += configurations.provided
findbugs {
    effort = "max"
    excludeFilter = file("$rootProject.projectDir/findbugsExclude.xml")
}
jar {
    manifest {
        attributes 'Implementation-Title': "${project.archivesBaseName}",
                'Implementation-Version': verklemptVersion
    }

    from ("${projectDir}/src/main/java") {
        include('**/*.fxml')
        include('**/*.css')
        include('**/*.png')
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task groovydocJar(type: Jar, dependsOn: classes) {
    classifier "javadoc"
    from groovydoc
}

artifacts {
    (System.getenv("TRAVIS") == "true") ? archives(sourcesJar) : archives(sourcesJar, groovydocJar)
}
publishing {
    publications {
        "verklempt"(MavenPublication) {
            from components.java
            artifact sourcesJar { classifier "sources" }
            artifact groovydocJar { classifier "javadoc" }
            groupId 'com.digitalclash'
            artifactId project.name
            version verklemptVersion
            pom.withXml {
                def root = asNode()
                root.appendNode('name', "Module $project.name")
                root.appendNode('description', "The $project.name artifact")
                root.children().last() + pomConfig

                // We cannot configure the licenses in pomConfig due to a name conflict with the 'license' extension defined by the com.github.hierynomus.license plugin
                def licenseNode = root.appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'The Apache Software License, Version 2.0')
                licenseNode.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                licenseNode.appendNode('distribution', 'repo')
            }
        }
    }
}

task "create-dirs" {
    doLast {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.groovy.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    }
}

eclipse {
    classpath {
        file {
            whenMerged {
                def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                jre.accessRules.add(new org.gradle.plugins.ide.eclipse.model.AccessRule('0', 'javafx/**'))
            }
        }
        plusConfigurations << configurations.provided
    }
    project {
        file.beforeMerged { project ->
            project.natures.clear()
        }
    }
}

idea {
    module {
        scopes.PROVIDED.plus += [configurations.provided]
    }
}
clover {
    testIncludes = ['**/*Test.java', '**/*Spec.groovy']
//        targetPercentage = '85%'

    contexts {
        statement {
            name = 'log'
            regexp = '^.*logger\\..*'
        }
        method {
            name = 'main'
            regexp = 'public static void main\\(String args\\[\\]\\).*'
        }
        method {
            name = 'getters'
            regexp = 'public [^\\s]+ get[A-Z][^\\s]+\\(\\)'
            maxStatements = 1
        }
        method {
            name = 'setters'
            regexp = 'public void set[A-Z][^\\s]+\\(.+\\)'
            maxStatements = 1
        }
    }

    report {
        html = true
        pdf = true
        filter = 'log,main,getters,setters'

        testResultsDir = project.tasks.getByName('test').reports.junitXml.destination
        testResultsInclude = 'TEST-*.xml'

        columns {
            coveredMethods format: 'longbar', min: '75'
            coveredStatements format: '%'
            coveredBranches format: 'raw'
            totalPercentageCovered format: '%', scope: 'package'
        }
    }
}
asciidoctor {
    sourceDir = file("doc")
    sources {include 'index.adoc'}
    logDocuments = true
    attributes 'source-highlighter': 'coderay',
               'coderay-linenums-mode': 'table',
               icons: 'font',
               imagesdir: 'img',
               'data-uri': '',
               linkattrs: true,
               linkcss: true,
               'git-tag': verklemptTag,
               'blob-root-master': "https://github.com/mlipper/verklempt/blob/master",
               'blob-root': "https://github.com/mlipper/verklempt/blob/$verklemptTag"
}

gitPublish {
    System.properties['org.ajoberstar.grgit.auth.username'] = System.getenv('GH_PAGES_ACCESS_TOKEN') ?: ''
    System.properties['org.ajoberstar.grgit.auth.password'] = ''

    repoUri = 'https://github.com/mlipper/verklempt.git'
    branch = 'gh-pages'

    contents {
        def pgType = project.hasProperty('ghPageType') ? ghPageType : 'latest'
        if(pgType == 'init') {
            from file("ghpages")
        } else if(pgType == 'list') {
            from file("build/release-list")
        } else {
            from file("${asciidoctor.outputDir.path}/html5")
            from file("build/docs")
        }
        def docDir = Boolean.valueOf(verklemptReleaseBuild) ? 'releases' : 'snapshots'
        if(pgType == 'init') {
            into "."
        } else if(pgType == 'list') {
            into "."
            preserve {
                include '**'
                exclude "releases.md"
            }
        } else if(pgType == 'version') {
            gitPublishPush.enabled = (docDir != 'snapshots')
            into "$docDir/$verklemptVersion"

            preserve {
                include '**'
                exclude "$docDir/$verklemptVersion"
            }
        } else {
            into "$docDir/latest"

            preserve {
                include '**'
                exclude "$docDir/latest"
            }
        }
    }
}  



artifacts {
    (System.getenv("TRAVIS") == "true") ? archives(sourcesJar) : archives(sourcesJar, groovydocJar)
}



configureGroovydoc(groovydoc)

def configureGroovydoc(task) {
    configure(task) {
        docTitle "verklempt Documentation ($verklemptVersion)"
        windowTitle "verklempt Documentation ($verklemptVersion)"
        destinationDir file("build/docs/groovydoc")
        if(project.configurations.hasProperty('provided')) {
            classpath += project.configurations.provided
        }
        link "http://docs.oracle.com/javase/8/docs/api/", 'java'
        link "http://docs.groovy-lang.org/docs/groovy-$groovyVersion/html/gapi/", "groovy"
    }
}

task "update-release-list" {
    doLast {
        updateReleaseList('https://mlipper.github.io/verklempt')
    }
}

def updateReleaseList(String docBaseUrl) {
    List<String> releases = getReleases()
    def markdown = getReleasesMarkdown(releases, docBaseUrl)
    def releaseListDir = new File('build/release-list')
    releaseListDir.mkdirs()
    new File(releaseListDir, 'releases.md').write(markdown)
}

def getReleases() {
    GitHub gitHubApi = GitHub.connectUsingPassword(System.getenv('GH_PAGES_ACCESS_TOKEN') ?: '', '')
    def releases = gitHubApi.getOrganization('mlipper')
            .getRepository('verklempt')
            .getDirectoryContent("releases", "gh-pages")*.name
    releases.removeAll { !it || it == 'latest' }
    releases.reverse()
}

def getReleasesMarkdown(List<String> releases, String docBaseUrl) {
    def releasesTemplate = '''
            ## List of all releases ##

            **Latest snapshot**
            - [documentation](\u0024docBaseUrl/snapshots/latest)
            - [javadoc](\u0024docBaseUrl/snapshots/latest/groovydoc)

            <% releases.each { %>**Release \u0024it**
              - [documentation](\u0024docBaseUrl/releases/\u0024it)
              - [javadoc](\u0024docBaseUrl/releases/\u0024it/groovydoc)

            <% } %>
        '''.stripIndent()

    def engine = new SimpleTemplateEngine()
    def template = engine.createTemplate(releasesTemplate)
    def binding = [
            docBaseUrl: docBaseUrl,
            releases  : releases
    ]

    template.make(binding).toString()
}

def readPasswordFromConsole(title, prompt) {
    JPanel panel = new JPanel()
    JLabel label = new JLabel(prompt)
    JPasswordField pass = new JPasswordField(24)
    panel.add(label)
    panel.add(pass)
    def options = ["OK", "Cancel"] as Object[]
    int option = JOptionPane.showOptionDialog(null, panel, title,
            JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, null)
    if(option != 0) throw new InvalidUserDataException("Operation cancelled by the user.")
    new String(pass.password)
}

def isPublishTask(task) {
    task.name.startsWith('publish')
}

gradle.taskGraph.whenReady { taskGraph ->
    if (gradle.taskGraph.allTasks.findAll {task -> isPublishTask(task)}) {
        if(!project.hasProperty('signingKeyId') || !project.hasProperty('signingSecretKeyRingFile'))
            throw new InvalidUserDataException("Please configure your signing credentials in gradle-local.properties.")
        def password = readPasswordFromConsole('Please enter your PGP credentials:', 'PGP Private Key Password')
        allprojects { ext."signing.keyId" = signingKeyId }
        allprojects { ext."signing.secretKeyRingFile" = signingSecretKeyRingFile }
        allprojects { ext."signing.password" = password }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.getProperty('bintrayUser') : "unknownUser"
    key =  project.hasProperty('bintrayKey') ? project.getProperty('bintrayKey') : "unknownKey"
    publications = ['verklempt']
    pkg {
        repo = 'maven'
        name = 'verklempt'
        userOrg = 'mlipper'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/mlipper/verklempt.git'

        version {
                name = verklemptVersion
                desc = "verklempt $verklemptVersion"
                released  = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZZ")
                vcsTag = verklemptVersion
                gpg {
                    sign = true
                }
        }
    }
}
